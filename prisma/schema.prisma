datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

model User {
  id                   String                @id @default(cuid())
  telegramId           String                @unique
  phone                String?               @unique
  firstName            String
  lastName             String?
  language             String                @default("uz")
  age                  Int?
  position             String?
  isCaptain            Boolean               @default(false)
  username             String?               @unique
  passwordHash         String?
  isActive             Boolean               @default(true)
  pendingInviteToken   String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  teams                TeamMember[]
  registrations        Registration[]
  payments             Payment[]
  sessionRegistrations SessionRegistration[]
  stats                PlayerStat[]
  matchStats           MatchStat[]
  captainTeams         Team[]                @relation("TeamCaptain")
  momMatches           Match[]               @relation("MatchMoMUser")
  momSessions          Session[]             @relation("SessionMoMUser")
}

model Team {
  id                   String                @id @default(cuid())
  name                 String
  captainId            String
  captain              User                  @relation("TeamCaptain", fields: [captainId], references: [id])
  members              TeamMember[]
  description          String?
  inviteToken          String?               @unique
  inviteExpiresAt      DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  registrations        Registration[]
  payments             Payment[]
  sessionRegistrations SessionRegistration[]
  homeMatches          Match[]               @relation("MatchHomeTeam")
  awayMatches          Match[]               @relation("MatchAwayTeam")
  wonMatches           Match[]               @relation("MatchWinnerTeam")
  sessionTeams         SessionTeam[]
  wonSessions          Session[]             @relation("SessionWinnerTeam")
}

model TeamMember {
  id     String  @id @default(cuid())
  teamId String
  userId String
  role   String? // e.g., player, substitute
  team   Team    @relation(fields: [teamId], references: [id])
  user   User    @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
}

model Match {
  id                  String         @id @default(cuid())
  dateTime            DateTime
  location            String
  description         String?
  pricePerUser        Int            @default(40000)
  capacityPerTeam     Int            @default(7)
  type                MatchType      @default(FIVE_V_FIVE)
  sessionId           String?
  homeTeamId          String?
  awayTeamId          String?
  homeScore           Int            @default(0)
  awayScore           Int            @default(0)
  result              MatchResult?
  winnerTeamId        String?
  winnerTeam          Team?          @relation("MatchWinnerTeam", fields: [winnerTeamId], references: [id])
  manOfTheMatchUserId String?
  manOfTheMatch       User?          @relation("MatchMoMUser", fields: [manOfTheMatchUserId], references: [id])
  session             Session?       @relation(fields: [sessionId], references: [id])
  homeTeam            Team?          @relation("MatchHomeTeam", fields: [homeTeamId], references: [id])
  awayTeam            Team?          @relation("MatchAwayTeam", fields: [awayTeamId], references: [id])
  registrations       Registration[]
  stats               MatchStat[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

enum MatchType {
  FIVE_V_FIVE
  SIX_V_SIX
}

enum MatchResult {
  HOME
  AWAY
  DRAW
}

model Session {
  id                    String                @id @default(cuid())
  startAt               DateTime
  endAt                 DateTime
  status                SessionStatus         @default(PLANNED)
  type                  MatchType             @default(FIVE_V_FIVE)
  maxTeams              Int                   @default(4)
  stadium               String?
  place                 String?
  winnerTeamId          String?
  winnerTeam            Team?                 @relation("SessionWinnerTeam", fields: [winnerTeamId], references: [id])
  manOfTheSessionUserId String?
  manOfTheSession       User?                 @relation("SessionMoMUser", fields: [manOfTheSessionUserId], references: [id])
  matches               Match[]
  teams                 SessionTeam[]
  registrations         SessionRegistration[]
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

enum SessionStatus {
  PLANNED
  STARTED
  FINISHED
}

model SessionTeam {
  id           String  @id @default(cuid())
  sessionId    String
  teamId       String
  points       Int     @default(0)
  goalsFor     Int     @default(0)
  goalsAgainst Int     @default(0)
  session      Session @relation(fields: [sessionId], references: [id])
  team         Team    @relation(fields: [teamId], references: [id])

  @@unique([sessionId, teamId])
}

model Registration {
  id         String             @id @default(cuid())
  matchId    String
  userId     String?
  teamId     String?
  type       RegistrationType
  status     RegistrationStatus @default(PENDING)
  groupIndex Int?
  createdAt  DateTime           @default(now())
  approvedAt DateTime?
  match      Match              @relation(fields: [matchId], references: [id])
  user       User?              @relation(fields: [userId], references: [id])
  team       Team?              @relation(fields: [teamId], references: [id])
  payment    Payment?
}

model SessionRegistration {
  id         String             @id @default(cuid())
  sessionId  String
  userId     String?
  teamId     String?
  type       RegistrationType
  status     RegistrationStatus @default(PENDING)
  groupIndex Int?
  createdAt  DateTime           @default(now())
  approvedAt DateTime?
  session    Session            @relation(fields: [sessionId], references: [id])
  user       User?              @relation(fields: [userId], references: [id])
  team       Team?              @relation(fields: [teamId], references: [id])
  payment    Payment?
}

enum RegistrationType {
  INDIVIDUAL
  TEAM
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model Payment {
  id                    String               @id @default(cuid())
  registrationId        String?              @unique
  amount                Int
  method                String // MANUAL, PAYME, CLICK
  status                PaymentStatus        @default(PENDING)
  createdAt             DateTime             @default(now())
  confirmedAt           DateTime?
  receiptFileId         String?
  registration          Registration?        @relation(fields: [registrationId], references: [id])
  userId                String?
  teamId                String?
  user                  User?                @relation(fields: [userId], references: [id])
  team                  Team?                @relation(fields: [teamId], references: [id])
  sessionRegistrationId String?              @unique
  sessionRegistration   SessionRegistration? @relation(fields: [sessionRegistrationId], references: [id])
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
  REFUNDED
}

model MatchStat {
  id      String  @id @default(cuid())
  matchId String
  userId  String
  goals   Int     @default(0)
  assists Int     @default(0)
  won     Boolean @default(false)
  match   Match   @relation(fields: [matchId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([matchId, userId])
}

model PlayerStat {
  id      String @id @default(cuid())
  userId  String @unique
  rating  Float  @default(0)
  goals   Int    @default(0)
  assists Int    @default(0)
  wins    Int    @default(0)
  user    User   @relation(fields: [userId], references: [id])
}
