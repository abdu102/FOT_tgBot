import { Scenes, Telegraf } from 'telegraf';
import type { PrismaClient } from '@prisma/client';
import { buildMainKeyboard, buildAuthKeyboard } from '../keyboards/main';
import bcrypt from 'bcryptjs';

export function registerMainHandlers(bot: Telegraf<Scenes.WizardContext>, prisma: PrismaClient) {
  bot.hears(['üìù Ro‚Äòyxatdan o‚Äòtish', 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'], async (ctx) => {
    const u = await prisma.user.findUnique({ where: { id: (ctx.state as any).userId } });
    if (u?.phone) {
      return ctx.reply('Siz allaqachon ro‚Äòyxatdan o‚Äòtgansiz / –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    }
    // Ask which mode
    await ctx.reply('Qaysi turda? / –ö–∞–∫?', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üë§ O‚Äòyinchi / –ò–≥—Ä–æ–∫', callback_data: 'go_individual' }],
          [{ text: 'üë• Jamoa / –ö–æ–º–∞–Ω–¥–∞', callback_data: 'go_team' }],
        ],
      },
    } as any);
  });

  bot.action('go_individual', async (ctx) => {
    await ctx.scene.enter('onboarding:individual');
  });
  bot.action('go_team', async (ctx) => {
    await ctx.scene.enter('onboarding:team');
  });

  bot.hears(['‚öΩ Haftalik o‚Äòyinlar', '‚öΩ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏'], async (ctx) => {
    const isRegistered = Boolean((ctx.state as any).isRegistered);
    const matches = await prisma.match.findMany({ orderBy: { dateTime: 'asc' }, take: 10 });
    if (!matches.length) return ctx.reply('Hozircha yo‚Äòq / –ü–æ–∫–∞ –Ω–µ—Ç', isRegistered ? buildMainKeyboard(ctx) : buildAuthKeyboard(ctx));
    for (const m of matches) {
      await ctx.reply(
        `üìÖ ${m.dateTime.toISOString().slice(0,16).replace('T',' ')}\nüìç ${m.location}\nüí∞ ${m.pricePerUser} UZS`,
        {
          reply_markup: {
            inline_keyboard: [[{ text: '‚úçÔ∏è Ro‚Äòyxatga yozilish / –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', callback_data: `signup_${m.id}` }]],
          },
        } as any
      );
    }
  });

  bot.action(/signup_(.*)/, async (ctx) => {
    const matchId = (ctx.match as any)[1] as string;
    const userId = (ctx.state as any).userId as string;
    // Create registration pending
    await prisma.registration.create({
      data: {
        matchId,
        userId,
        type: 'INDIVIDUAL',
        status: 'PENDING',
      },
    });
    await ctx.reply('üßæ To‚Äòlov uchun ma‚Äôlumot yuborildi. Admin tasdiqlaydi. / –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –∂–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.');
  });

  bot.hears(['üë§ Profil', 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'], async (ctx) => {
    const userId = (ctx.state as any).userId as string;
    const u = await prisma.user.findUnique({ where: { id: userId }, include: { stats: true } });
    const ps = u?.stats?.[0];
    await ctx.reply(`üë§ ${u?.firstName || ''}\nüìû ${u?.phone || '-'}\n‚≠êÔ∏è ${ps?.rating ?? 0} | ‚öΩ ${ps?.goals ?? 0} | üÖ∞Ô∏è ${ps?.assists ?? 0} | üèÜ ${ps?.wins ?? 0}`);
    await ctx.reply('‚öôÔ∏è Sozlamalar / –ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úèÔ∏è Ma‚Äôlumotni o‚Äòzgartirish / –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data: 'profile_edit' }],
          [{ text: 'üîê Parolni o‚Äòzgartirish / –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å', callback_data: 'profile_password' }],
          [{ text: 'üö™ Chiqish / –í—ã–π—Ç–∏', callback_data: 'profile_logout' }],
        ],
      },
    } as any);
  });

  // Logout: deactivate account (do not delete), remove phone linkage
  bot.action('profile_logout', async (ctx) => {
    const userId = (ctx.state as any).userId as string;
    await prisma.user.update({ where: { id: userId }, data: { isActive: false, phone: null } });
    (ctx.state as any).isRegistered = false;
    try { await ctx.telegram.deleteMessage(ctx.chat!.id, (ctx.callbackQuery as any).message.message_id); } catch {}
    await ctx.reply('‚úÖ Tizimdan chiqdingiz / –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', buildAuthKeyboard(ctx));
  });

  // Change password flow (simple inline asks)
  bot.action('profile_password', async (ctx) => {
    await ctx.reply('Yangi parol yuboring / –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å');
    (ctx.session as any).awaitingPassword = true;
  });

  bot.on('text', async (ctx, next) => {
    if ((ctx.session as any).awaitingPassword) {
      const raw = (ctx.message as any).text.trim();
      if (raw.length < 4) {
        return ctx.reply('Parol juda qisqa / –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
      }
      const userId = (ctx.state as any).userId as string;
      const hash = await bcrypt.hash(raw, 10);
      await prisma.user.update({ where: { id: userId }, data: { passwordHash: hash } });
      (ctx.session as any).awaitingPassword = false;
      return ctx.reply('‚úÖ Parol yangilandi / –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω');
    }
    return next();
  });

  // Login button
  bot.hears(['üîê Kirish', 'üîê –í–æ–π—Ç–∏'], async (ctx) => {
    await ctx.reply('Login: username yoki ism yuboring / –û—Ç–ø—Ä–∞–≤—å—Ç–µ username –∏–ª–∏ –∏–º—è');
    (ctx.session as any).awaitingLoginName = true;
  });

  bot.on('text', async (ctx, next) => {
    const sess: any = ctx.session || {};
    if (sess.awaitingLoginName && !sess.awaitingLoginPassword) {
      sess.loginName = (ctx.message as any).text.trim();
      sess.awaitingLoginPassword = true;
      sess.awaitingLoginName = false;
      return ctx.reply('Parol yuboring / –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å');
    }
    if (sess.awaitingLoginPassword) {
      const name = (sess.loginName as string).trim();
      const pass = (ctx.message as any).text.trim();
      const user = await prisma.user.findFirst({ where: { OR: [{ username: name }, { firstName: name }], isActive: true } });
      if (!user?.passwordHash || !(await bcrypt.compare(pass, user.passwordHash))) {
        sess.awaitingLoginPassword = false;
        return ctx.reply('Login yoki parol noto‚Äòg‚Äòri / –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      }
      // Link current telegramId to this user
      await prisma.user.update({ where: { id: user.id }, data: { telegramId: String(ctx.from?.id), isActive: true } });
      (ctx.state as any).userId = user.id;
      (ctx.state as any).isRegistered = Boolean(user.phone);
      sess.awaitingLoginPassword = false;
      await ctx.reply('‚úÖ Kirish muvaffaqiyatli / –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
      return ctx.reply('üìã Asosiy menyu / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', (user.phone ? buildMainKeyboard(ctx) : buildAuthKeyboard(ctx)) as any);
    }
    return next();
  });
}


